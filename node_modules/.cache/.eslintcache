[{"/home/pranay/Desktop/react-applications/job-portal-react/src/index.js":"1","/home/pranay/Desktop/react-applications/job-portal-react/src/reportWebVitals.js":"2","/home/pranay/Desktop/react-applications/job-portal-react/src/App.js":"3","/home/pranay/Desktop/react-applications/job-portal-react/src/components/job_component.js":"4","/home/pranay/Desktop/react-applications/job-portal-react/src/components/post_component.js":"5","/home/pranay/Desktop/react-applications/job-portal-react/src/components/alert_component.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1616348726493,"results":"9","hashOfConfig":"8"},{"size":473,"mtime":1616198768000,"results":"10","hashOfConfig":"8"},{"size":10183,"mtime":1616199014000,"results":"11","hashOfConfig":"8"},{"size":3868,"mtime":1616343974000,"results":"12","hashOfConfig":"8"},{"size":852,"mtime":1616343258000,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ywkdcw",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"/home/pranay/Desktop/react-applications/job-portal-react/src/index.js",[],"/home/pranay/Desktop/react-applications/job-portal-react/src/reportWebVitals.js",[],"/home/pranay/Desktop/react-applications/job-portal-react/src/App.js",[],"/home/pranay/Desktop/react-applications/job-portal-react/src/components/job_component.js",["29","30","31","32","33","34"],"import {useEffect, useState} from 'react';\r\nimport axios from \"axios\";\r\nimport '../css/job_component.css';\r\nimport AlertComponent from './alert_component';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function JobComponent(){\r\n  const [job, setJobs] = useState([]);\r\n  const [storeData, setStoredData] = useState([]);\r\n  const [state, setState] = useState(0);\r\n  const [option, setOption] = useState(\"All\")\r\n  const [emptyMessage, setEmptyMessage] = useState('Ooops!! No records.')\r\n  const [alertMessage, setAlertMessage] = useState(\"\")\r\n  const [alertFired, setAlertFired] = useState(false)\r\n  const [color, setColor] = useState('green')\r\n  const [editable, setEditable] = useState();\r\n  const [getID, setGetID] = useState(999);\r\n  const [inputJobName, setInputJobName] = useState(\"\")\r\n  const [inputJobDescription, setInputJobDescription] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:4000/api/joblist\")\r\n      .then((response) => {\r\n        setJobs(response.data);\r\n        if(option===\"All\"){\r\n          setStoredData(response.data);\r\n        }\r\n        else if(option===\"Completed\"){\r\n          const filterCompleted= job.filter((data)=> data.status===\"Completed\")\r\n          if(filterCompleted.length>1)\r\n            setStoredData(filterCompleted)\r\n          else {\r\n            console.log('Completed Status is empty.')\r\n            setStoredData(filterCompleted)\r\n            setEmptyMessage(\"Ooops!! No records.\");\r\n          } \r\n        }\r\n        else if(option===\"InProgress\"){\r\n          const filterProgress = job.filter((data) => data.status === \"InProgress\")\r\n          setStoredData(filterProgress)\r\n          setEmptyMessage(\"Ooops!! No records.\");\r\n        }\r\n      }) \r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n  }, [state, option]);\r\n\r\n  let handleStatus = (job) => {\r\n    axios\r\n      .put(`http://localhost:4000/api/update`, {\r\n        jobId: job.jobid,\r\n        status_bool: !job.status_bool,\r\n      })\r\n      .then((response) => {\r\n        \r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n    setState((state) => state + 1);\r\n  };\r\n\r\n  let handleEdit = (obj) => {\r\n    setInputJobName(\"\")\r\n    setInputJobDescription(\"\")\r\n    setEditable(!editable)\r\n    setGetID(obj)\r\n  }\r\n\r\n\r\n  let handleDelete = (job) => {\r\n    if(window.confirm(`Want to delete record ${job.jobid} ?`)){\r\n      axios\r\n        .delete(`http://localhost:4000/api/delete/${job.jobid}`)\r\n        .then((response) => {\r\n          console.log(\"Data deleted successfully\");\r\n        })\r\n        .catch((err) => {\r\n          console.log(\"DELETION ERROR:\\n\", err);\r\n        });\r\n      setAlertMessage(\"Record Deleted.\")\r\n      setAlertFired(true)\r\n      setColor('green')\r\n      setTimeout(()=>{\r\n        setAlertFired(false)\r\n      }, 3000)\r\n      setState((state) => state + 1);\r\n    }\r\n    else{\r\n      console.log('CANCEL DELETION')\r\n      setAlertFired(true)\r\n      setColor('red')\r\n      setTimeout(() => {\r\n        setAlertFired(false);\r\n      }, 3000);\r\n      setAlertMessage(\"Record deletion cancelled\")\r\n    }\r\n  }\r\n\r\n  // SAVE CHANGES METHOD\r\n  let handleSave = (obj) => {\r\n    if(inputJobName.length && inputJobDescription.length){\r\n      console.log('IF BLOCK')\r\n      axios\r\n        .put(`http://localhost:4000/api/update_record`, {\r\n          jobId: obj.jobid,\r\n          job_name: inputJobName,\r\n          job_desc: inputJobDescription\r\n        })\r\n        .then((response) => {})\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n\r\n        setInputJobName(\"\")\r\n        setInputJobDescription(\"\")\r\n        setAlertFired(true)\r\n        setColor('green')\r\n        setAlertMessage(\"Updated record successfully.\");\r\n        setTimeout(()=>{\r\n          setAlertFired(false)\r\n        }, 5000)\r\n        setState(state=> state+1)\r\n    }\r\n    else{\r\n      setInputJobName(\"\");\r\n      setInputJobDescription(\"\");\r\n      setAlertFired(true)\r\n      setColor('yellow')\r\n      setAlertMessage(\"Fields cannot be empty.\");\r\n      setTimeout(()=>{\r\n        // setting alertFired to false after 5000ms.\r\n        setAlertFired(false)\r\n      },5000)\r\n      setState(state=> state+1)\r\n    }\r\n  }\r\n\r\n  // Filtering Jobs for dropdown option (Show All)\r\n  let filterContent = () => {\r\n    setJobs(storeData);\r\n    setOption(\"All\")\r\n  };\r\n\r\n  // Filtering Jobs for dropdown option (status: Completed)\r\n  let filterCompleted = () => {\r\n    let filterCompleted = job.filter((obj) => obj.status === \"Completed\");\r\n    setJobs(filterCompleted);\r\n    setOption(\"Completed\")\r\n  };\r\n\r\n  // Filtering Jobs for dropdown option (status: In Progress)\r\n  let filterProgress = () => {\r\n    let filterProgress = job.filter((obj) => obj.status === \"InProgress\");\r\n    setJobs(filterProgress);\r\n    setOption(\"InProgress\")\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"top-menu\">\r\n        <div className=\"dropdown\">\r\n          <button\r\n            className=\"btn btn-secondary dropdown-toggle btn-lg\"\r\n            type=\"button\"\r\n            id=\"dropdownMenuButton1\"\r\n            data-bs-toggle=\"dropdown\"\r\n            aria-expanded=\"false\"\r\n          >\r\n            Select Status\r\n          </button>\r\n          <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton1\">\r\n            <li>\r\n              <a className=\"dropdown-item\" href=\"#\" onClick={filterContent}>\r\n                Show All\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <a className=\"dropdown-item\" href=\"#\" onClick={filterCompleted}>\r\n                Completed\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <a className=\"dropdown-item\" href=\"#\" onClick={filterProgress}>\r\n                In Progress\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n\r\n        <button\r\n          className=\"btn btn-secondary btn-lg insert\"\r\n          title=\"Insert Record\"\r\n        >\r\n          <Link to=\"/post\">\r\n            <i class=\"fa fa-plus\" style={{ color: \"white\" }}></i>\r\n          </Link>\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"scrollbar\">\r\n        <table className=\"table table-dark table-striped\">\r\n          <thead>\r\n            <tr>\r\n              <th scope=\"col\">ID</th>\r\n              <th scope=\"col\">Name</th>\r\n              <th scope=\"col\">Description</th>\r\n              <th scope=\"col\">Status</th>\r\n              <th>Change Status</th>\r\n            </tr>\r\n          </thead>\r\n          {storeData.length ? (\r\n            <tbody>\r\n              {storeData.map((obj) => {\r\n                return (\r\n                  <tr key={obj.jobid} title={obj.jobid}>\r\n                    <td>{obj.jobid}</td>\r\n                    {editable && obj.jobid === getID ? (\r\n                      <td>\r\n                        <input\r\n                          type=\"text\"\r\n                          value={inputJobName}\r\n                          onChange={(e) => setInputJobName(e.target.value)}\r\n                          placeholder={obj.jobename}\r\n                          className=\"form-control editable-jobName\"\r\n                          spellCheck=\"true\"\r\n                        />\r\n                      </td>\r\n                    ) : (\r\n                      <td>{obj.jobename}</td>\r\n                    )}\r\n                    {editable && obj.jobid === getID ? (\r\n                      <td>\r\n                        <input\r\n                          type=\"text\"\r\n                          value={inputJobDescription}\r\n                          onChange={(e) =>\r\n                            setInputJobDescription(e.target.value)\r\n                          }\r\n                          placeholder={obj.jobdescription}\r\n                          className=\"form-control editable-jobDesc\"\r\n                          spellCheck=\"true\"\r\n                        />\r\n                      </td>\r\n                    ) : (\r\n                      <td>{obj.jobdescription}</td>\r\n                    )}\r\n                    <td>{obj.status}</td>\r\n                    <td>\r\n                      <button\r\n                        className=\"btn btn-secondary\"\r\n                        title=\"Change Status\"\r\n                        onClick={() => handleStatus(obj)}\r\n                      >\r\n                        <i\r\n                          className=\"fa fa-exchange\"\r\n                          aria-hidden=\"true\"\r\n                          style={{ marginLeft: \"1%\" }}\r\n                        ></i>\r\n                      </button>\r\n\r\n                      <button\r\n                        className=\"btn btn-warning warning\"\r\n                        title=\"Edit\"\r\n                        onClick={() => handleEdit(obj.jobid)}\r\n                      >\r\n                        <a className=\"a-link\" itemdata={obj}>\r\n                          <i\r\n                            className=\"fa fa-pencil-square\"\r\n                            aria-hidden=\"true\"\r\n                          ></i>\r\n                        </a>\r\n                      </button>\r\n\r\n                      <button\r\n                        className=\"btn btn-danger danger\"\r\n                        title=\"Delete\"\r\n                        onClick={() => handleDelete(obj)}\r\n                      >\r\n                        <i className=\"fa fa-trash\"></i>\r\n                      </button>\r\n\r\n                      <button\r\n                        className=\"btn btn-success success\"\r\n                        title=\"Save Changes\"\r\n                        onClick={() => handleSave(obj)}\r\n                      >\r\n                        <i className=\"fa fa-save\"></i>\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          ) : (\r\n            <tbody>\r\n              <tr>\r\n                <td className=\"EmptyMessage\" colSpan={5}>\r\n                  <h2>{emptyMessage}</h2>\r\n                </td>\r\n              </tr>\r\n            </tbody>\r\n          )}\r\n        </table>\r\n      </div>\r\n      {alertFired ? (\r\n        <AlertComponent item={alertMessage} color={color} />\r\n      ) : (\r\n        <h1></h1>\r\n      )}\r\n    </div>\r\n  );\r\n}","/home/pranay/Desktop/react-applications/job-portal-react/src/components/post_component.js",["35"],"import '../css/post_component.css';\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\nimport AlertComponent from './alert_component';\r\n\r\nexport default function PostComponent(props){\r\n\r\n    let history = useHistory()\r\n    const [id, setID] = useState(9999)\r\n    const [name, setName] = useState(\"\")\r\n    const [description, setDescription] = useState(\"\")\r\n    const [color, setColor] = useState('green')\r\n    const [alertMsg , setAlertMsg] = useState('')\r\n    const [alertFired, setAlertFired] = useState(false)\r\n    const STATUS = \"InProgress\"\r\n    const status_bool = false\r\n\r\n    let handlePost = () => {\r\n        axios.post('http://localhost:4000/api/post', {\r\n          jobid: id,\r\n          jobename: name,\r\n          jobdescription: description,\r\n          status: STATUS,\r\n          status_bool: status_bool \r\n        })\r\n        .then(response=>{\r\n          \r\n          setAlertMsg(response.data)\r\n          setColor('green')\r\n          setAlertFired(true)\r\n          setTimeout(()=>{\r\n            setAlertFired(false);\r\n            \r\n          },5000)\r\n          history.goBack();\r\n        })\r\n        .catch(error=>{\r\n          setColor('red')\r\n          setAlertMsg('Error Inserting Data.')\r\n          setAlertFired(true);\r\n          setTimeout(() => {\r\n            setAlertFired(false);\r\n          },5000);\r\n          console.log(\"Record Insertion Failed.\", error);\r\n        })   \r\n        \r\n    }\r\n\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <form className=\"post-form\">\r\n          <div className=\"form-group column\">\r\n            <div>\r\n              <h2>Post Information</h2>\r\n            </div>\r\n            <div className=\"col-lg-4 col-xs-2 center\">\r\n              <label className=\"form-label  input-label\">Job ID</label>\r\n              <input\r\n                type=\"number\"\r\n                className=\"form-control input-field\"\r\n                placeholder=\"Generated Automatically\"\r\n                onChange={(e) => setID(e.target.value)}\r\n                disabled\r\n              />\r\n            </div>\r\n            <div className=\"col-lg-4 col-xs-2 center\">\r\n              <label className=\"form-label  input-label\">Job Name</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control input-field\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"col-lg-4 col-xs-2 center\">\r\n              <label className=\"form-label  input-label\">Job Description</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control input-field\"\r\n                value={description}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n              />\r\n            </div>\r\n            <div className=\"col-lg-4 col-xs-2 center\">\r\n              <label className=\"form-label  input-label\">Job Status</label>\r\n              <input\r\n                type=\"text\"\r\n                value=\"InProgress\"\r\n                className=\"form-control input-field\"\r\n                disabled\r\n              />\r\n            </div>\r\n            <div className=\"col-lg-4 col-xs-2 center\">\r\n              <label className=\"form-label  input-label\">Status Boolean</label>\r\n              <input\r\n                type=\"text\"\r\n                value=\"false\"\r\n                className=\"form-control input-field\"\r\n                disabled\r\n              />\r\n            </div>\r\n            <div className=\"col-lg-4 col-xs-2 post-button center\">\r\n              <button className=\"btn btn-secondary input-field\" onClick={() => handlePost()}>INSERT</button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n\r\n        {alertFired ? <AlertComponent color={color} item={alertMsg}/> : <h6></h6>}\r\n      </div>\r\n    );\r\n}","/home/pranay/Desktop/react-applications/job-portal-react/src/components/alert_component.js",["36","37","38","39","40","41"]," import { useState, useEffect } from 'react';\r\n\r\n export default function AlertComponent(props){\r\n\r\n    const [alertMsg, setAlertMsg] = useState(props.item)\r\n    const [color, setColor] = useState(props.color)\r\n\r\n\r\n    return (\r\n      <div style={{ marginTop: \"0.8%\" }}>\r\n        {color === \"green\" ? (\r\n          <div className=\"alert alert-success\" role=\"alert\">\r\n            {alertMsg}\r\n          </div>\r\n        ) : (\r\n          <h6></h6>\r\n        )}\r\n\r\n        {color === \"yellow\" ? (\r\n          <div className=\"alert alert-warning\" role=\"alert\">\r\n            {alertMsg}\r\n          </div>\r\n        ) : (\r\n          <h6></h6>\r\n        )}\r\n\r\n        {color === \"red\" ? (\r\n          <div className=\"alert alert-danger\" role=\"alert\">\r\n            {alertMsg}\r\n          </div>\r\n        ) : (\r\n          <h6></h6>\r\n        )}\r\n      </div>\r\n    );\r\n }\r\n",{"ruleId":"42","severity":1,"message":"43","line":49,"column":6,"nodeType":"44","endLine":49,"endColumn":21,"suggestions":"45"},{"ruleId":"46","severity":1,"message":"47","line":177,"column":15,"nodeType":"48","endLine":177,"endColumn":77},{"ruleId":"46","severity":1,"message":"47","line":182,"column":15,"nodeType":"48","endLine":182,"endColumn":79},{"ruleId":"46","severity":1,"message":"47","line":187,"column":15,"nodeType":"48","endLine":187,"endColumn":78},{"ruleId":"46","severity":1,"message":"49","line":270,"column":25,"nodeType":"48","endLine":270,"endColumn":62},{"ruleId":"50","severity":1,"message":"51","line":312,"column":9,"nodeType":"48","endLine":312,"endColumn":13},{"ruleId":"50","severity":1,"message":"51","line":110,"column":73,"nodeType":"48","endLine":110,"endColumn":77},{"ruleId":"52","severity":1,"message":"53","line":1,"column":21,"nodeType":"54","messageId":"55","endLine":1,"endColumn":30},{"ruleId":"52","severity":1,"message":"56","line":5,"column":22,"nodeType":"54","messageId":"55","endLine":5,"endColumn":33},{"ruleId":"52","severity":1,"message":"57","line":6,"column":19,"nodeType":"54","messageId":"55","endLine":6,"endColumn":27},{"ruleId":"50","severity":1,"message":"51","line":16,"column":11,"nodeType":"48","endLine":16,"endColumn":15},{"ruleId":"50","severity":1,"message":"51","line":24,"column":11,"nodeType":"48","endLine":24,"endColumn":15},{"ruleId":"50","severity":1,"message":"51","line":32,"column":11,"nodeType":"48","endLine":32,"endColumn":15},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'job'. Either include it or remove the dependency array.","ArrayExpression",["58"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setAlertMsg' is assigned a value but never used.","'setColor' is assigned a value but never used.",{"desc":"59","fix":"60"},"Update the dependencies array to be: [state, option, job]",{"range":"61","text":"62"},[1814,1829],"[state, option, job]"]